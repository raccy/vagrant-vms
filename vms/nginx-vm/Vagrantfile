require 'digest/md5'
require 'uri'

Vagrant.configure('2') do |config|
  config.vm.box = 'generic/rocky9'

  config.vm.box_check_update = true

  hostname = File.basename(File.absolute_path(__dir__)).gsub('_', '-')
  ssh_port = 10_000 + (Digest::MD5.digest(hostname).unpack1('L') % 20_000)

  config.vm.hostname = hostname

  config.vm.network 'forwarded_port', guest: 22, host: ssh_port, host_ip: '127.0.0.1', id: 'ssh'

  config.vm.synced_folder '.', '/vagrant', disabled: true
  # config.vm.synced_folder '.', '/vagrant', type: 'rsync'

  config.vm.provider 'virtualbox' do |vb|
    vb.cpus = 2
    vb.memory = 4096
  end

  config.vm.provider 'hyperv' do |hv|
    hv.cpus = 2
    hv.maxmemory = 4096
  end

  # enable env
  config.env.enable if Vagrant.has_plugin?('vagrant-env')

  # do manual 'vagrant vbguest --do install'
  config.vbguest.auto_update = false if Vagrant.has_plugin?('vagrant-vbguest')

  # BUG... selinux enforced
  # config.timezone.value = 'Asia/Tokyo' if Vagrant.has_plugin?('vagrant-timezone')

  proxy_protocols = %i[http https ftp].to_h do |name|
    value = ["VAGRANT_#{name.upcase}_PROXY", "#{name.upcase}_PROXY", "#{name}_proxy"]
            .map { |key| ENV[key] }.find(&:itself)
    [name, value]
  end.compact
  no_proxy = %w[VAGRANT_NO_PROXY NO_PROXY no_proxy].map { |key| ENV[key] }.find(&:itself)

  if Vagrant.has_plugin?('vagrant-proxyconf')
    if proxy_protocols.empty?
      config.proxy.enabled = false
    else
      config.proxy.enabled = true
      proxy_protocols.each do |name, value|
        config.proxy.__send__("#{name}=", value)
      end
      config.proxy.no_proxy = no_proxy if no_proxy
    end
  end

  if proxy_protocols.empty?
    proxy = nil
  else
    proxy_env = {
      HTTP_PROXY: proxy_protocols[:http],
      HTTPS_PROXY: proxy_protocols[:https],
      FTP_PROXY: proxy_protocols[:ftp],
      NO_PROXY: no_proxy,
    }.compact
    proxy_env = proxy_env.merge(proxy_env.transform_keys(&:downcase))
    proxy_uri = URI.parse(proxy_protocols.values.first)
    proxy = {
      uri: proxy_uri.to_s,
      scheme: proxy_uri.scheme,
      host: proxy_uri.host,
      port: proxy_uri.port,
      user: proxy_uri.user,
      password: proxy_uri.password,
      excludes: no_proxy.to_s.split(',').map(&:strip),
      env: proxy_env,
    }
  end

  config.vm.provision 'ansible' do |ansible|
    ENV['ANSIBLE_INJECT_FACT_VARS'] = 'False'
    ansible.playbook = '../../ansible/el9/setup.yml'
    vars = {
      setup: {
        pkgs: %w[
          vim
          rsync
        ],
      },
    }

    vars[:proxy] = proxy if proxy

    if vars[:git]
      vars[:git][:config] ||= {}
      vars[:git][:config][:user] ||= {}
      %i[name email].each do |name|
        value = `git config --get user.#{name}`.chomp
        vars[:git][:config][:user][name] = value if value && !value.empty?
      end
    end

    ansible.extra_vars = vars
  end

  config.vm.provision 'nginx', type: 'ansible' do |ansible|
    ansible.playbook = 'nginx.yml'
    vars = {
      tls_file: {
        cert: '/etc/pki/tls/certs/server.crt',
        key: '/etc/pki/tls/private/server.key',
      },
      firewall_mgr: 'firewalld',
      geoip: {
        account_id: ENV['GEOIP_ACCOUNT_ID'],
        license_key: ENV['GEOIP_LICENSE_KEY'],
      },
    }
    vars[:proxy] = proxy if proxy
    ansible.extra_vars = vars
  end
end
